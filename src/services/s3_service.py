"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å S3 (Yandex Cloud)
"""
import boto3
from botocore.exceptions import ClientError
from pathlib import Path
from typing import Optional, Dict
from datetime import datetime

from ..config.settings import S3_CONFIG


class S3Service:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å S3"""
    
    def __init__(self):
        self.client = self._create_client()
    
    def _create_client(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ S3"""
        return boto3.client(
            's3',
            aws_access_key_id=S3_CONFIG['aws_access_key_id'],
            aws_secret_access_key=S3_CONFIG['aws_secret_access_key'],
            endpoint_url=S3_CONFIG['endpoint_url'],
            region_name=S3_CONFIG['region_name']
        )
    
    def upload_file(self, file_path: Path, object_name: str) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ S3 –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
        
        Args:
            file_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            object_name: –ò–º—è –æ–±—ä–µ–∫—Ç–∞ –≤ S3
        
        Returns:
            –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º {file_path.name} –Ω–∞ S3 –∫–∞–∫ {object_name}...")
            self.client.upload_file(str(file_path), S3_CONFIG['bucket_name'], object_name)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
            self.client.put_object_acl(
                ACL='public-read',
                Bucket=S3_CONFIG['bucket_name'],
                Key=object_name
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            public_url = f"{S3_CONFIG['endpoint_url']}/{S3_CONFIG['bucket_name']}/{object_name}"
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ S3: {public_url}")
            
            return public_url
            
        except ClientError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ S3: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ S3: {e}")
            return None
    
    def upload_transcript_files(self, task_id: str, filename: str, subtitle_files: Dict[str, str]) -> Dict[str, str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ S3
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            subtitle_files: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–∞–π–ª—ã
        """
        s3_links = {}
        base_name = Path(filename).stem
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        for format_type, file_path in subtitle_files.items():
            if not file_path or not Path(file_path).exists():
                continue
            
            s3_object_name = f"transcripts/{task_id}/{base_name}_{timestamp}.{format_type}"
            s3_url = self.upload_file(Path(file_path), s3_object_name)
            
            if s3_url:
                s3_links[format_type] = s3_url
        
        return s3_links
    
    def upload_original_file(self, task_id: str, filename: str, file_path: Path) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ S3
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
        Returns:
            –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ None
        """
        base_name = Path(filename).stem
        file_extension = file_path.suffix
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        s3_object_name = f"originals/{task_id}/{base_name}_{timestamp}{file_extension}"
        
        return self.upload_file(file_path, s3_object_name)
    
    def upload_json_data(self, task_id: str, filename: str, data: dict) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö –Ω–∞ S3
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        
        Returns:
            –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ None
        """
        import json
        from ..config.settings import TEMP_DIR
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
        temp_json_file = TEMP_DIR / f"{task_id}_full.json"
        
        try:
            with open(temp_json_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ S3
            base_name = Path(filename).stem
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            s3_object_name = f"transcripts/{task_id}/{base_name}_{timestamp}_full.json"
            
            s3_url = self.upload_file(temp_json_file, s3_object_name)
            
            return s3_url
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON –Ω–∞ S3: {e}")
            return None
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_json_file.exists():
                temp_json_file.unlink() 