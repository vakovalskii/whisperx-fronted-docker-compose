"""
API —Ä–æ—É—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""
import uuid
from pathlib import Path
from typing import List, Optional, Dict, Any
from datetime import datetime
import tempfile
import shutil
import os

from fastapi import APIRouter, File, UploadFile, HTTPException, BackgroundTasks, Query, Depends
from fastapi.responses import JSONResponse, FileResponse, RedirectResponse, StreamingResponse

from ..models.schemas import (
    TranscriptionStatus, 
    TranscriptionResult, 
    TranscriptionListItem,
    TranscriptionConfig,
    User
)
from ..core.transcription_processor import TranscriptionProcessor
from ..config.settings import UPLOADS_DIR, SUPPORTED_FORMATS, SUMMARIZATION_CONFIG
from ..middleware.auth_middleware import get_current_user, get_current_user_optional  # –í–∫–ª—é—á–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ
from ..services.summarization_service import SummarizationService
import logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
processor = TranscriptionProcessor()

# –°–µ—Ä–≤–∏—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
summarization_service = SummarizationService()


@router.post("/upload", response_model=TranscriptionStatus)
async def upload_file(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    model: str = "large-v3",
    language: str = "ru",
    diarize: bool = False,
    hf_token: Optional[str] = None,
    compute_type: str = "float16",
    batch_size: int = 16,
    current_user: User = Depends(get_current_user)
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:
    - –ê—É–¥–∏–æ: mp3, m4a, wav, flac, ogg, wma, aac, opus
    - –í–∏–¥–µ–æ: mp4, avi, mkv, mov, wmv, flv, webm, 3gp, mts
    
    –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:
    - JSON: –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    - SRT: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ
    - VTT: –≤–µ–±-—Å—É–±—Ç–∏—Ç—Ä—ã (WebVTT)
    - TSV: —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    - DOCX: –¥–æ–∫—É–º–µ–Ω—Ç Microsoft Word
    - PDF: –¥–æ–∫—É–º–µ–Ω—Ç PDF —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ñ–∞–π–ª–∞
    2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Yandex Cloud S3
    4. –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π —Ñ–∞–π–ª–æ–≤
    5. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ S3 –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    file_extension = Path(file.filename).suffix.lower().lstrip('.')
    if file_extension not in SUPPORTED_FORMATS:
        raise HTTPException(
            status_code=400, 
            detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(SUPPORTED_FORMATS)}"
        )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    task_id = str(uuid.uuid4())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = UPLOADS_DIR / f"{task_id}_{file.filename}"
    
    try:
        with open(file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
    
    # –ï—Å–ª–∏ HF —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ, –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if hf_token is None and diarize:
        hf_token = os.getenv('HF_TOKEN')
        print(f"üîë –ü–æ–ª—É—á–µ–Ω HF_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {hf_token[:20] if hf_token else 'None'}...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TranscriptionConfig(
        model=model,
        language=language,
        diarize=diarize,
        hf_token=hf_token,
        compute_type=compute_type,
        batch_size=batch_size
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    processor.update_task_status(task_id, "pending", "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    background_tasks.add_task(
        processor.process_transcription, 
        task_id, 
        file_path, 
        config,
        file.filename,
        current_user.id  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )
    
    return TranscriptionStatus(
        id=task_id,
        status="pending",
        filename=file.filename,
        created_at=datetime.now().isoformat(),
        progress="–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å"
    )


@router.get("/status/{task_id}", response_model=TranscriptionResult)
async def get_transcription_status(
    task_id: str,
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ ID"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ø–∞–º—è—Ç–∏
    current_status = processor.get_task_status(task_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_record = processor.db_service.get_transcription(task_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if db_record and db_record.get('user_id') != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    
    if db_record:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å S3 –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–µ–≥–º–µ–Ω—Ç—ã
        if db_record['status'] == 'completed':
            # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å S3
            segments = []
            if 'full_json_s3_url' in db_record:
                try:
                    import requests
                    response = requests.get(db_record['full_json_s3_url'])
                    if response.status_code == 200:
                        full_data = response.json()
                        segments = full_data.get('segments', [])
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã —Å S3: {e}")
            
            return TranscriptionResult(
                id=db_record['id'],
                filename=db_record['filename'],
                status=db_record['status'],
                created_at=db_record['created_at'],
                completed_at=db_record.get('completed_at'),
                s3_links=db_record.get('s3_links', {}),
                segments=segments,
                error=db_record.get('error')
            )
        else:
            # –î–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            return TranscriptionResult(
                id=db_record['id'],
                filename=db_record['filename'],
                status=db_record['status'],
                created_at=db_record['created_at'],
                error=db_record.get('error'),
                s3_links=db_record.get('s3_links', {})
            )
    
    elif current_status:
        # –ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        return TranscriptionResult(
            id=task_id,
            filename="processing...",
            status=current_status.get("status", "unknown"),
            created_at=datetime.now().isoformat(),
            progress=current_status.get("progress"),
            progress_percent=current_status.get("progress_percent"),
            error=current_status.get("error"),
            s3_links={}
        )
    
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ uploads (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞)
        upload_files = list(UPLOADS_DIR.glob(f"{task_id}_*"))
        if upload_files:
            return TranscriptionResult(
                id=task_id,
                filename="pending...",
                status="pending",
                created_at=datetime.now().isoformat(),
                progress="–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                s3_links={}
            )
        else:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@router.get("/transcriptions", response_model=List[TranscriptionListItem])
async def get_all_transcriptions(
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    transcriptions = processor.db_service.get_user_transcriptions(current_user.id)
    
    results = []
    for data in transcriptions:
        list_item = TranscriptionListItem(
            id=data.get("id"),
            filename=data.get("filename"),
            status=data.get("status"),
            created_at=data.get("created_at"),
            completed_at=data.get("completed_at"),
            s3_links=data.get("s3_links", {}),
            error=data.get("error"),
            progress=data.get("progress")
        )
        results.append(list_item)
    
    return results


@router.get("/s3-links/{task_id}")
async def get_s3_links(task_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã –≤ S3 –∏–∑ JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_record = processor.db_service.get_transcription(task_id)
    
    if not db_record:
        raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    s3_links = db_record.get('s3_links', {}).copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º full_json_s3_url –≤ s3_links –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if 'full_json_s3_url' in db_record:
        s3_links['full_json_s3_url'] = db_record['full_json_s3_url']
    
    if not s3_links:
        raise HTTPException(status_code=404, detail="S3 —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    
    return {
        "task_id": task_id,
        "filename": db_record.get("filename"),
        "s3_links": s3_links,
        "created_at": db_record.get("created_at"),
        "completed_at": db_record.get("completed_at")
    }


@router.delete("/transcription/{task_id}")
async def delete_transcription(task_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_record = processor.db_service.get_transcription(task_id)
    
    if not db_record:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏)
        deleted_files = []
        
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        from ..config.settings import TRANSCRIPTS_DIR
        result_file = TRANSCRIPTS_DIR / f"{task_id}.json"
        if result_file.exists():
            result_file.unlink()
            deleted_files.append(str(result_file))
        
        # –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        audio_files = list(UPLOADS_DIR.glob(f"{task_id}_*"))
        for audio_file in audio_files:
            audio_file.unlink()
            deleted_files.append(str(audio_file))
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        for format_type in ['srt', 'vtt', 'tsv', 'docx', 'pdf']:
            subtitle_files = list(TRANSCRIPTS_DIR.glob(f"{task_id}_*.{format_type}"))
            for subtitle_file in subtitle_files:
                subtitle_file.unlink()
                deleted_files.append(str(subtitle_file))
        
        if not deleted_files:
            raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
        if task_id in processor.task_statuses:
            del processor.task_statuses[task_id]
        
        return {"message": f"–£–¥–∞–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(deleted_files)}"}
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    processor.db_service.delete_transcription(task_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
    if task_id in processor.task_statuses:
        del processor.task_statuses[task_id]
    
    return {
        "message": f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "note": "–§–∞–π–ª—ã –≤ S3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    }


@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "models_loaded": processor.whisper_manager.is_loaded,
        "active_tasks": len([s for s in processor.task_statuses.values() if s["status"] == "processing"]),
        "supported_formats": list(SUPPORTED_FORMATS)
    }


@router.post("/summarize/{task_id}")
async def create_summarization(
    task_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ –±–∞–∑—ã
        db_record = processor.db_service.get_transcription(task_id)
        
        if not db_record:
            raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if db_record.get('user_id') != current_user.id:
            raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        if db_record['status'] != 'completed':
            raise HTTPException(status_code=400, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ —Å S3
        s3_links = db_record.get('s3_links', {})
        full_json_url = s3_links.get('full_json_s3_url') or db_record.get('full_json_s3_url')
        
        if not full_json_url:
            raise HTTPException(status_code=404, detail="JSON —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Å S3
        import requests
        response = requests.get(full_json_url)
        if response.status_code != 200:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å S3")
        
        transcription_data = response.json()
        
        # –°–æ–∑–¥–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
        summary = await summarization_service.create_summary(transcription_data)
        
        return {
            "task_id": task_id,
            "summary": summary,
            "created_at": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {task_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")


@router.get("/config/summarization")
async def get_summarization_config(
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    
    Returns:
        dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        
    Note:
        –≠—Ç–æ—Ç endpoint —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        –°–∞–º–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ —á–µ—Ä–µ–∑ /summarize/{task_id}
    """
    return {
        "api_url": SUMMARIZATION_CONFIG['api_url'],
        "model": SUMMARIZATION_CONFIG['model'],
        "max_tokens": SUMMARIZATION_CONFIG['max_tokens'],
        "temperature": SUMMARIZATION_CONFIG['temperature'],
        "has_api_key": bool(SUMMARIZATION_CONFIG['api_key'] and SUMMARIZATION_CONFIG['api_key'] != 'your-api-key-here'),
        "backend_processing": True  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    }


@router.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "redmadtrancribe x WhisperX API v2.0",
        "description": "API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤ 6 —Ñ–æ—Ä–º–∞—Ç–æ–≤",
        "supported_formats": {
            "input": list(SUPPORTED_FORMATS),
            "output": ["JSON", "SRT", "VTT", "TSV", "DOCX", "PDF"]
        },
        "features": [
            "‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å WhisperX",
            "‚úÖ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤ (—Å HuggingFace —Ç–æ–∫–µ–Ω–æ–º)",
            "‚úÖ 6 —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: JSON, SRT, VTT, TSV, DOCX, PDF",
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Yandex Cloud S3",
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
            "‚úÖ JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        ],
        "formats": {
            "JSON": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏",
            "SRT": "–°—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ",
            "VTT": "–í–µ–±-—Å—É–±—Ç–∏—Ç—Ä—ã",
            "TSV": "–¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "DOCX": "–î–æ–∫—É–º–µ–Ω—Ç Microsoft Word", 
            "PDF": "–î–æ–∫—É–º–µ–Ω—Ç PDF —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
        },
        "endpoints": {
            "POST /upload": "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞",
            "GET /status/{task_id}": "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            "GET /transcriptions": "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π",
            "GET /s3-links/{task_id}": "–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –≤ S3",
            "GET /download/transcript/{task_id}": "–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö",
            "GET /download/subtitle/{task_id}": "–°–∫–∞—á–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã",
            "DELETE /transcription/{task_id}": "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
            "GET /health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"
        }
    }


@router.get("/download/transcript/{task_id}")
async def download_transcript(
    task_id: str, 
    format_type: str = Query(..., description="–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: json, docx, pdf")
):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
    if format_type not in ['json', 'docx', 'pdf']:
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: json, docx, pdf")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    db_record = processor.db_service.get_transcription(task_id)
    
    if not db_record:
        raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if db_record['status'] != 'completed':
        raise HTTPException(status_code=400, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º S3 —Å—Å—ã–ª–∫–∏
    s3_links = db_record.get('s3_links', {})
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ S3
        if format_type == 'json':
            s3_key = 'full_json_s3_url'
        else:
            s3_key = format_type  # 'pdf' –∏–ª–∏ 'docx'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º S3 —Å—Å—ã–ª–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å
        s3_url = None
        if s3_key in s3_links:
            s3_url = s3_links[s3_key]
        elif format_type == 'json' and 'full_json_s3_url' in db_record:
            s3_url = db_record['full_json_s3_url']
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –≤ S3, –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        if s3_url:
            return RedirectResponse(url=s3_url, status_code=302)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ S3, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ –ª–µ—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è PDF –∏ DOCX)
        if format_type in ['docx', 'pdf']:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π JSON —Å S3
            full_json_url = None
            if 'full_json_s3_url' in s3_links:
                full_json_url = s3_links['full_json_s3_url']
            elif 'full_json_s3_url' in db_record:
                full_json_url = db_record['full_json_s3_url']
            
            if not full_json_url:
                raise HTTPException(status_code=404, detail="–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ S3")
            
            import requests
            response = requests.get(full_json_url)
            if response.status_code != 200:
                raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å S3")
            
            transcription_data = response.json()
            segments = transcription_data.get('segments', [])
            
            if not segments:
                raise HTTPException(status_code=400, detail="–°–µ–≥–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
            from ..services.subtitle_generator import SubtitleGenerator
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = None
            try:
                if format_type == 'docx':
                    temp_file = SubtitleGenerator.generate_docx(
                        segments, task_id, db_record['filename'], temp=True
                    )
                elif format_type == 'pdf':
                    temp_file = SubtitleGenerator.generate_pdf(
                        segments, task_id, db_record['filename'], temp=True
                    )
                
                if not temp_file or not Path(temp_file).exists():
                    raise HTTPException(status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {format_type.upper()} —Ñ–∞–π–ª")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                media_type = {
                    'pdf': 'application/pdf',
                    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                }.get(format_type, 'application/octet-stream')
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º
                return FileResponse(
                    path=temp_file,
                    filename=f"{Path(db_record['filename']).stem}_{task_id}.{format_type}",
                    media_type=media_type,
                    background=BackgroundTasks()
                )
            
            except Exception as gen_error:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if temp_file and Path(temp_file).exists():
                    try:
                        Path(temp_file).unlink()
                    except:
                        pass
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {format_type.upper()}: {str(gen_error)}")
        else:
            # –î–ª—è JSON –µ—Å–ª–∏ –Ω–µ—Ç –≤ S3
            raise HTTPException(status_code=404, detail=f"{format_type.upper()} —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3")
    
    except HTTPException:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")


@router.get("/download/subtitle/{task_id}")
async def download_subtitle(
    task_id: str, 
    format_type: str = Query(..., description="–§–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤: srt, vtt, tsv")
):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
    if format_type not in ['srt', 'vtt', 'tsv']:
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: srt, vtt, tsv")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    db_record = processor.db_service.get_transcription(task_id)
    
    if not db_record:
        raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if db_record['status'] != 'completed':
        raise HTTPException(status_code=400, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º S3 —Å—Å—ã–ª–∫–∏
    s3_links = db_record.get('s3_links', {})
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å S3
        full_json_url = None
        if 'full_json_s3_url' in s3_links:
            full_json_url = s3_links['full_json_s3_url']
        elif 'full_json_s3_url' in db_record:
            full_json_url = db_record['full_json_s3_url']
        
        if not full_json_url:
            raise HTTPException(status_code=404, detail="–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ S3")
        
        import requests
        response = requests.get(full_json_url)
        if response.status_code != 200:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å S3")
        
        transcription_data = response.json()
        segments = transcription_data.get('segments', [])
        
        if not segments:
            raise HTTPException(status_code=400, detail="–°–µ–≥–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
        from ..services.subtitle_generator import SubtitleGenerator
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = None
        try:
            if format_type == 'srt':
                temp_file = SubtitleGenerator.generate_srt(
                    segments, task_id, db_record['filename'], temp=True
                )
            elif format_type == 'vtt':
                temp_file = SubtitleGenerator.generate_vtt(
                    segments, task_id, db_record['filename'], temp=True
                )
            elif format_type == 'tsv':
                temp_file = SubtitleGenerator.generate_tsv(
                    segments, task_id, db_record['filename'], temp=True
                )
            
            if not temp_file or not Path(temp_file).exists():
                raise HTTPException(status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {format_type.upper()} —Ñ–∞–π–ª")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
            return FileResponse(
                path=temp_file,
                filename=f"{Path(db_record['filename']).stem}_{task_id}.{format_type}",
                media_type='text/plain; charset=utf-8',
                background=BackgroundTasks()
            )
            
        except Exception as gen_error:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if temp_file and Path(temp_file).exists():
                try:
                    Path(temp_file).unlink()
                except:
                    pass
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {format_type.upper()}: {str(gen_error)}")
    
    except HTTPException:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")


@router.get("/download/audio/{task_id}")
async def download_audio(task_id: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    db_record = processor.db_service.get_transcription(task_id)
    
    if not db_record:
        raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º S3 —Å—Å—ã–ª–∫–∏
    s3_links = db_record.get('s3_links', {})
    
    if 'audio_s3_url' in s3_links:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ S3
        return JSONResponse({
            "download_url": s3_links['audio_s3_url'],
            "filename": db_record['filename'],
            "format": "audio"
        })
    else:
        raise HTTPException(status_code=404, detail="–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3") 