"""
–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""
import subprocess
import asyncio
from pathlib import Path
from typing import Dict, Any
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

from ..models.schemas import TranscriptionConfig
from ..services.subtitle_generator import SubtitleGenerator
from ..services.s3_service import S3Service
from ..services.database_service import DatabaseService
from ..core.whisper_manager import WhisperManager
from ..config.settings import UPLOADS_DIR, TEMP_DIR, PROCESSING_CONFIG


class TranscriptionProcessor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    
    def __init__(self):
        self.whisper_manager = WhisperManager()
        self.subtitle_generator = SubtitleGenerator()
        self.s3_service = S3Service()
        self.db_service = DatabaseService()
        self.executor = ThreadPoolExecutor(max_workers=PROCESSING_CONFIG['max_workers'])
        self.task_statuses = {}  # –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏
    
    def update_task_status(self, task_id: str, status: str, progress: str = None, error: str = None, progress_percent: int = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        self.task_statuses[task_id] = {
            "status": status,
            "progress": progress,
            "progress_percent": progress_percent,
            "error": error,
            "updated_at": datetime.now().isoformat()
        }
        print(f"üìä –°—Ç–∞—Ç—É—Å {task_id}: {status} ({progress_percent}%) - {progress}")
    
    def get_task_status(self, task_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        return self.task_statuses.get(task_id, {})
    
    def extract_audio_from_video(self, video_path: Path, audio_path: Path) -> bool:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        try:
            cmd = [
                'ffmpeg', '-i', str(video_path), 
                '-vn', '-acodec', 'pcm_s16le', 
                '-ar', '16000', '-ac', '1', 
                str(audio_path), '-y'
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            return result.returncode == 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return False
    
    def cleanup_local_files(self, task_id: str, filename: str, s3_links: Dict[str, str]):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ S3"""
        files_to_delete = []
        
        try:
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ S3
            if 'original' in s3_links:
                original_files = list(UPLOADS_DIR.glob(f"{task_id}_*"))
                files_to_delete.extend(original_files)
            
            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ S3
            for format_type in ['srt', 'vtt', 'tsv', 'docx', 'pdf']:
                if format_type in s3_links:
                    from ..config.settings import TRANSCRIPTS_DIR
                    local_files = list(TRANSCRIPTS_DIR.glob(f"{task_id}_*.{format_type}"))
                    files_to_delete.extend(local_files)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            for file_path in files_to_delete:
                try:
                    if file_path.exists():
                        file_path.unlink()
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
            
            print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {task_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def process_transcription_sync(
        self, 
        task_id: str, 
        file_path: Path, 
        config: TranscriptionConfig,
        original_filename: str,
        user_id: str = None
    ):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        try:
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (0-10%)
            self.update_task_status(task_id, "preparing", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...", progress_percent=5)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∞—É–¥–∏–æ
            file_extension = file_path.suffix.lower().lstrip('.')
            video_formats = ['mp4', 'avi', 'mkv', 'mov', 'wmv', 'flv', 'webm', '3gp', 'mts']
            
            if file_extension in video_formats:
                # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ (10-20%)
                self.update_task_status(task_id, "extracting_audio", "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...", progress_percent=15)
                audio_path = TEMP_DIR / f"{task_id}_audio.wav"
                if not self.extract_audio_from_video(file_path, audio_path):
                    error_msg = "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"
                    self.save_error_result(task_id, error_msg, original_filename, user_id)
                    self.update_task_status(task_id, "failed", error=error_msg, progress_percent=0)
                    return
                processing_file = audio_path
            else:
                processing_file = file_path
            
            # –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π (20-30%)
            self.update_task_status(task_id, "loading_models", "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π WhisperX...", progress_percent=25)
            if not self.whisper_manager.is_loaded:
                # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                def status_callback(status, message, percent):
                    self.update_task_status(task_id, status, message, progress_percent=percent)
                
                self.whisper_manager.load_models(config, status_callback)
            
            # –≠—Ç–∞–ø 4-7: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ (30-75%)
            def transcription_callback(status, message, percent):
                self.update_task_status(task_id, status, message, progress_percent=percent)
            
            result = self.whisper_manager.transcribe_audio(str(processing_file), config, transcription_callback)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            result["created_at"] = datetime.now().isoformat()
            result["task_id"] = task_id
            result["original_filename"] = original_filename
            result["language"] = config.language
            
            # –≠—Ç–∞–ø 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ (75-85%)
            self.update_task_status(task_id, "generating_files", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤...", progress_percent=80)
            
            # –≠—Ç–∞–ø 9: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ S3 (85-95%)
            self.update_task_status(task_id, "uploading_s3", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ S3...", progress_percent=90)
            self.save_transcription_result(task_id, result, original_filename, user_id)
            
            # –≠—Ç–∞–ø 10: –û—á–∏—Å—Ç–∫–∞ (95-100%)
            self.update_task_status(task_id, "cleaning_up", "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...", progress_percent=97)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if processing_file != file_path and processing_file.exists():
                processing_file.unlink()
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (100%)
            self.update_task_status(task_id, "completed", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ S3", progress_percent=100)
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {task_id}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.save_error_result(task_id, error_msg, original_filename, user_id)
            self.update_task_status(task_id, "failed", error=error_msg, progress_percent=0)
    
    async def process_transcription(
        self, 
        task_id: str, 
        file_path: Path, 
        config: TranscriptionConfig,
        original_filename: str,
        user_id: str = None
    ):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(
            self.executor, 
            self.process_transcription_sync, 
            task_id, 
            file_path, 
            config, 
            original_filename,
            user_id
        )
    
    def save_transcription_result(self, task_id: str, result: Dict[str, Any], filename: str, user_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞ S3"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        self.update_task_status(task_id, "generating_files", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤...", progress_percent=80)
        segments = result.get("segments", [])
        subtitle_files = self.subtitle_generator.generate_all_formats(
            segments, task_id, filename, temp=True
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ S3
        self.update_task_status(task_id, "uploading_s3", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ S3...", progress_percent=85)
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ S3 –¥–ª—è {task_id}...")
        s3_links = self.s3_service.upload_transcript_files(task_id, filename, subtitle_files)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ S3
        self.update_task_status(task_id, "uploading_s3", "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ S3...", progress_percent=88)
        original_files = list(UPLOADS_DIR.glob(f"{task_id}_*"))
        if original_files:
            original_file = original_files[0]
            original_file_s3_url = self.s3_service.upload_original_file(task_id, filename, original_file)
            if original_file_s3_url:
                s3_links['original'] = original_file_s3_url
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
        self.update_task_status(task_id, "uploading_s3", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...", progress_percent=92)
        transcription_data = self.db_service.create_completed_record(
            task_id=task_id,
            filename=filename,
            s3_links=s3_links,
            language=result.get("language"),
            segments_count=len(segments),
            duration=result.get("duration", 0),
            user_id=user_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db_service.add_transcription(transcription_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ S3 –∫–∞–∫ JSON —Ñ–∞–π–ª
        self.update_task_status(task_id, "uploading_s3", "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ JSON –Ω–∞ S3...", progress_percent=95)
        full_transcription_data = {
            "id": task_id,
            "filename": filename,
            "status": "completed",
            "created_at": result.get("created_at"),
            "completed_at": datetime.now().isoformat(),
            "segments": segments,
            "language": result.get("language"),
            "s3_links": s3_links
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π JSON –Ω–∞ S3
        full_json_s3_url = self.s3_service.upload_json_data(task_id, filename, full_transcription_data)
        if full_json_s3_url:
            self.db_service.update_transcription(task_id, {"full_json_s3_url": full_json_s3_url})
        
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ S3
        self.update_task_status(task_id, "cleaning_up", "–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...", progress_percent=97)
        self.cleanup_local_files(task_id, filename, s3_links)
        
        return transcription_data
    
    def save_error_result(self, task_id: str, error_msg: str, filename: str, user_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –≤ JSON –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        error_data = self.db_service.create_error_record(task_id, filename, error_msg, user_id=user_id)
        self.db_service.add_transcription(error_data) 